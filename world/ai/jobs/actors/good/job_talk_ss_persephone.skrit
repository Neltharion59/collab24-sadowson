/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_ss_persephone.skrit

	Author(s)	: 	Sadowson

	Purpose		: 	Generic script that checks the completion of a quest.

	(C)opyright 2024 Sadowson.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Face$;
}

////////////////////////////////////////////////////////////////////////////////
//	face the audience
state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		if( !m_Go$.HasConversation )
		{
			report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
							m_Go$.GetTemplateName,
							m_Go$.Goid );
			SetState Exiting$;
		}
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{

		string	conversation_block$;
		int		Quest_Reward_Cash$ = 250;
		
		conversation_block$ = "conversation_persephone_hello";
		
		if( Victory.IsQuestActive( "quest_twin_sisters" ) )
		{
			#only( game )
			[[
				if( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "collab_ss_quest_note", m_target$ ) )
				{
					conversation_block$ = "conversation_persephone_quest";
					PostWorldMessage( WE_REQ_ACTIVATE, m_Go$.goid, m_Go$.goid, 199, 1.0 );	// Turn off the indicator.
				
					SiegePos 	SpawnPos$;
					GoCloneReq 	clonereq_Gold$ = MakeGoCloneReq( "gold" );
					SpawnPos$ = m_Target$.go.placement.position;
					if( m_Target$.Go.Hasmind )
					{
						if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, .25, .5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
						{
							clonereq_Gold$.StartingPos = m_target$.Go.Mind.TempPos1;
						}
					}
					clonereq_Gold$.SnapToTerrain = true;
					goid gold$ = GoDb.SCloneGo( clonereq_Gold$ );
					gold$.Go.Aspect.SetGoldValue( Quest_Reward_Cash$ );
				}
				else
				{
					conversation_block$ = "conversation_persephone_hello";
				}
			]]
		}
		if( Victory.IsQuestCompleted( "quest_twin_sisters" ) )
		{
			conversation_block$ = "conversation_persephone_idle";
		}
		
		//Use Conversation
		m_go$.GetConversation.RSSelectConversation( conversation_block$ );
		TryAnim$('talk');
		
		//Start talking
		m_Go$.GetConversation.RSActivateDialogue();
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		// $$$ close up any dialogs here...

		// Send a PL_FACE reguest without a target so that they no longer
		// continue to face the character they were talking to
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

		m_Job$.MarkForDeletion();
	}
}


